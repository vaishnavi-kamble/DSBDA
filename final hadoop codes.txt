Word count
Main.java


import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;

public class Main {

	public static void main(String[] args)throws IOException,InterruptedException,ClassNotFoundException{
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"word count");
		
		job.setJarByClass(Main.class);
		job.setMapperClass(MyMapper.class);
		job.setReducerClass(MyReducer.class);
		
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		FileInputFormat.addInputPath(job, new Path("/my_data1/data1.txt"));
		FileOutputFormat.setOutputPath(job, new Path("/my_data1/output_new5"));
		job.waitForCompletion(true);
	}
}

MyMapper.java

import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;
import java.util.StringTokenizer;

public class MyMapper extends Mapper<Object,Text,Text,IntWritable>{
	
	public void map(Object text,Text value,Context con) throws IOException,InterruptedException{
		StringTokenizer str = new StringTokenizer(value.toString());
		
		while(str.hasMoreTokens()) {
			con.write(new Text(str.nextToken()), new IntWritable(1));
		}
	}
}

MyReducer.java

import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;

public class MyReducer extends Reducer<Text,IntWritable,Text,IntWritable>{
	
	public void reduce(Text key,Iterable<IntWritable> values,Context con) throws IOException,InterruptedException{
		int sum = 0;
		
		for(IntWritable val:values) {
			sum += val.get();
		}
		
		con.write(key, new IntWritable(sum));
		
	}
}


word_log code

Main.java

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;

import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;

public class Main {

	public static void main(String[] args)throws IOException,InterruptedException,ClassNotFoundException{
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf,"word count");
		
		job.setJarByClass(Main.class);
		job.setMapperClass(MyMapper.class);
		job.setReducerClass(MyReducer.class);
		
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		FileInputFormat.addInputPath(job, new Path("/my_data/access_log_short.txt"));
		FileOutputFormat.setOutputPath(job, new Path("/my_data/count1"));
		job.waitForCompletion(true);
	}
}

MyMapperjava

import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;
import java.util.StringTokenizer;

public class MyMapper extends Mapper<Object,Text,Text,IntWritable>{
	
	public void map(Object text,Text value,Context con) throws IOException,InterruptedException{
		StringTokenizer str = new StringTokenizer(value.toString()," ");
		
			con.write(new Text(str.nextToken()), new IntWritable(1));
		}
}

MyReducer.java

import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import java.io.IOException;

public class MyReducer extends Reducer<Text,IntWritable,Text,IntWritable>{
	int max = 0;
	String maxip = "";
	
	public void reduce(Text key,Iterable<IntWritable> values,Context con) throws IOException,InterruptedException{
		int sum = 0;
		
		for(IntWritable val:values) {
			sum += val.get();
		}
		
		if(sum > max) {
			max = sum;
			maxip = key.toString();
		}
		
		
	}
	
	@Override
	public void cleanup(Context con) throws IOException,InterruptedException{
		con.write(new Text(maxip), new IntWritable(max));
	}
}


py Hadoop codes
mapper3.py
import sys

for line in sys.stdin:
	line = line.strip()
	words = line.split()
	for word in words:
		print(f"{word}\t1")
		

reducer3.py
import sys

current_word = None
current_count = 0
word = None

for line in sys.stdin:
	word,count = line.split("\t",1)
	count = int(count)
	
	if current_word == word:
		current_count += count
	else:
		if current_word:
			print("%s\t%s" %(current_word,current_count))
		current_word = word
		current_count = count

if current_word == word:
	print("%s\t%s" %(current_word,current_count))











